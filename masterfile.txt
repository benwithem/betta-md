// app/api/maintenance-logs.ts
import { NextApiRequest, NextApiResponse } from 'next';
import { query } from '../utils/db';
import { getRequestContext, CloudflareEnv } from '../types/cloudflare.d';
import { authMiddleware } from '../utils/auth';

type ExtendedNextApiRequest = NextApiRequest & {
  body: {
    ph: number;
    ammonia: number;
    nitrite: number;
    nitrate: number;
    id?: number;
  };
};

async function handler(req: ExtendedNextApiRequest, res: NextApiResponse) {
  const ctx = getRequestContext();
  const userId = ctx.env.USER_ID;

  if (req.method === 'POST') {
    const { ph, ammonia, nitrite, nitrate } = req.body;

    try {
      await query(
        'INSERT INTO maintenance_logs (user_id, ph, ammonia, nitrite, nitrate) VALUES (?, ?, ?, ?, ?)',
        [userId, ph, ammonia, nitrite, nitrate]
      );
      res.status(201).json({ message: 'Maintenance log created successfully' });
    } catch (error) {
      res.status(500).json({ error: 'Failed to create maintenance log' });
    }
  } else if (req.method === 'GET') {
    try {
      const logs = await query('SELECT * FROM maintenance_logs WHERE user_id = ?', [userId]);
      res.status(200).json(logs);
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch maintenance logs' });
    }
  } else if (req.method === 'DELETE') {
    const { id } = req.body;

    try {
      await query('DELETE FROM maintenance_logs WHERE id = ? AND user_id = ?', [id, userId]);
      res.status(200).json({ message: 'Maintenance log deleted successfully' });
    } catch (error) {
      res.status(500).json({ error: 'Failed to delete maintenance log' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}

export default authMiddleware(handler);
// app/api/route.ts
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

export const runtime = 'edge';

export async function GET(_request: NextRequest) {
  try {
    const responseText = 'Hello World';

    return NextResponse.json({ 
      message: responseText,
      success: true,
      timestamp: new Date().toISOString()
    }, {
      status: 200,
      headers: {
        'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300'
      }
    });

  } catch (error) {
    console.error('Error in GET request:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Internal Server Error'
    }, { 
      status: 500 
    });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    return NextResponse.json({ 
      message: 'POST request received',
      data: body,
      success: true 
    });

  } catch (error) {
    console.error('Error in POST request:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Internal Server Error' 
    }, { 
      status: 500 
    });
  }
}

// If you need Cloudflare bindings later, you can add this:
/*
import { getRequestContext } from '@cloudflare/next-on-pages';

// Inside your function:
const ctx = getRequestContext();
const myKv = ctx.env.MY_KV_NAMESPACE;
*/
// app/aquarium/page.tsx
'use client';

import { 
  Container, 
  Stack, 
  Card, 
  Group, 
  Title, 
  Text, 
  Tooltip, 
  ActionIcon, 
  Button, 
  Paper, 
  RingProgress, 
  SimpleGrid,
  TextInput,
  NumberInput,
  Space,
} from '@mantine/core';
import { IconRefresh, IconPlus, IconDroplet, IconThermometer, IconTestPipe2Filled, IconAlertTriangle } from '@tabler/icons-react';
import { MainLayout } from '../components/layout/MainLayout';
import { WaterParameterCard } from '../components/parameters/WaterParameterCard';
import { useState } from 'react';

export default function AquariumTracker() {
  const [ph, setPh] = useState<string | number>('');
  const [ammonia, setAmmonia] = useState<string | number>('');
  const [nitrite, setNitrite] = useState<string | number>('');
  const [nitrate, setNitrate] = useState<string | number>('');

  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const token = localStorage.getItem('token');

    try {
      const response = await fetch('/api/maintenance-logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ ph, ammonia, nitrite, nitrate }),
      });

      if (response.ok) {
        // Clear form and show success message
        setPh('');
        setAmmonia('');
        setNitrite('');
        setNitrate('');
        alert('Maintenance log created successfully');
      } else {
        // Show error message
        alert('Failed to create maintenance log');
      }
    } catch (error) {
      console.error('Error creating maintenance log:', error);
    }
  }

  return (
    <MainLayout>
      <Container size="lg" py="xl">
        <Stack gap="xl">
          {/* Header Section */}
          <Card shadow="sm" p="lg" radius="lg" withBorder>
            <Group justify="space-between" mb="lg">
              <div>
                <Title order={2} c="blue.7" mb="xs">Aquarium Tracker</Title>
                <Text c="dimmed" size="sm">
                  Track your aquarium parameters and get dosing recommendations
                </Text>
              </div>
              <Group>
                <Tooltip label="Refresh readings">
                  <ActionIcon variant="light" color="blue" size="lg" radius="md">
                    <IconRefresh size={20} />
                  </ActionIcon>
                </Tooltip>
                <Button 
                  variant="gradient"
                  gradient={{ from: 'blue', to: 'cyan', deg: 90 }}
                  leftSection={<IconPlus size={16} />}
                  radius="md"
                >
                  Add New Log
                </Button>
              </Group>
            </Group>

            {/* Water Quality Overview */}
            <Paper bg="blue.0" p="md" radius="md" mb="lg">
              <Group align="flex-start">
                <RingProgress
                  size={80}
                  thickness={8}
                  roundCaps
                  sections={[{ value: 87, color: 'blue' }]}
                  label={
                    <Text ta="center" size="xs" fw={700}>
                      87%
                    </Text>
                  }
                />
                <div>
                  <Text fw={500} mb={5}>Water Quality Score</Text>
                  <Text size="sm" c="dimmed">
                    Your aquarium is in good condition. pH levels could use some attention.
                  </Text>
                </div>
              </Group>
            </Paper>

            {/* Stats Cards */}
            <SimpleGrid cols={{ base: 1, sm: 3 }} spacing="md">
              <WaterParameterCard 
                icon={IconDroplet}
                label="Last Water Change"
                value="3 days ago"
                prevValue="7 days ago"
                color="blue"
                status="good"
              />
              <WaterParameterCard 
                icon={IconThermometer}
                label="Temperature"
                value="78.5°F"
                prevValue="77.8°F"
                color="orange"
                status="warning"
              />
              <WaterParameterCard 
                icon={IconTestPipe2Filled}
                label="pH Level"
                value="7.2"
                prevValue="7.0"
                color="violet"
                status="good"
              />
            </SimpleGrid>
          </Card>

          {/* Maintenance Log Form */}
          <Card shadow="sm" p="lg" radius="lg" withBorder>
            <Title order={3} mb="lg">Add Maintenance Log</Title>
            <form onSubmit={handleSubmit}>
              <TextInput
                label="pH"
                placeholder="Enter pH value"
                value={ph}
                onChange={(e) => setPh(e.target.value)}
                required
                mb="md"
              />
              <NumberInput
                label="Ammonia"
                placeholder="Enter ammonia value"
                step={0.01}
                value={ammonia}
                onChange={(value: string | number) => setAmmonia(value)}
                required
                mb="md"
              />
              <NumberInput
                label="Nitrite"
                placeholder="Enter nitrite value"
                step={0.01}
                value={nitrite}
                onChange={(value: string | number) => setNitrite(value)}
                required
                mb="md"
              />
              <NumberInput
                label="Nitrate"
                placeholder="Enter nitrate value"
                step={0.01}
                value={nitrate}
                onChange={(value: string | number) => setNitrate(value)}
                required
                mb="md"
              />
              <Button type="submit">Submit</Button>
            </form>
          </Card>

          {/* Recent Logs Section */}
          <Card shadow="sm" p="lg" radius="lg" withBorder>
            <Title order={3} mb="lg">Recent Logs</Title>
            <Paper py="xl" px="md" bg="gray.0" radius="md">
              <Stack align="center" gap="md">
                <IconAlertTriangle size={40} color="var(--mantine-color-gray-5)" />
                <Text c="dimmed" ta="center">
                  No logs recorded yet. Add your first water parameter log to start tracking.
                </Text>
                <Button variant="light" color="blue">
                  Create First Log
                </Button>
              </Stack>
            </Paper>
          </Card>
        </Stack>
      </Container>
    </MainLayout>
  );
}
// app/auth/login.ts
import { NextApiRequest, NextApiResponse } from 'next';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { query } from '../utils/db';

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    const { email, password } = req.body;

    try {
      const result = await query('SELECT * FROM users WHERE email = ?', [email]);
      const user: { id: number; email: string; password: string } = result[0] as { id: number; email: string; password: string };

      if (user && (await bcrypt.compare(password, user.password))) {
        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '1h' });
        res.status(200).json({ token });
      } else {
        res.status(401).json({ error: 'Invalid email or password' });
      }
    } catch (error) {
      res.status(500).json({ error: 'Failed to login' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}
// app/auth/signup.ts
import { NextApiRequest, NextApiResponse } from 'next';
import bcrypt from 'bcrypt';
import { query } from '../utils/db';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    const { email, password } = req.body;

    const hashedPassword = await bcrypt.hash(password, 10);

    try {
      await query(
        'INSERT INTO users (email, password) VALUES (?, ?)',
        [email, hashedPassword]
      );
      res.status(201).json({ message: 'User created successfully' });
    } catch (error) {
      res.status(500).json({ error: 'Failed to create user' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}
// app/maintenance/page.tsx
'use client';

import { MainLayout } from '../components/layout/MainLayout';
import { 
  Container, 
  Title, 
  Text, 
  Stack,
  SimpleGrid,
  Card,
  Group,
  ThemeIcon,
  Button,
  Paper,
  RingProgress
} from '@mantine/core';
import { 
  IconFish, 
  IconDroplet, 
  IconThermometer,
  IconFlask,
  IconChartBar 
} from '@tabler/icons-react';
import Link from 'next/link';

const DashboardCard = ({ 
  title, 
  description, 
  icon: Icon, 
  href,
  color = 'blue' 
}: {
  title: string;
  description: string;
  icon: typeof IconFish;
  href: string;
  color?: string;
}) => (
  <Card 
    component={Link}
    href={href}
    shadow="sm" 
    padding="lg" 
    radius="md" 
    withBorder
    style={{ 
      textDecoration: 'none',
      transition: 'transform 0.2s',
      '&:hover': { transform: 'translateY(-5px)' }
    }}
  >
    <Group>
      <ThemeIcon 
        size="xl" 
        radius="md" 
        variant="light" 
        color={color}
      >
        <Icon size={28} />
      </ThemeIcon>
      <div>
        <Text fw={500} size="lg" mb={5}>{title}</Text>
        <Text c="dimmed" size="sm">{description}</Text>
      </div>
    </Group>
  </Card>
);

export default function HomePage() {
  return (
    <MainLayout>
      <Container size="lg" py="xl">
        <Stack gap="xl">
          {/* Welcome Section */}
          <div>
            <Title order={1} size="h2" mb="xs">Welcome to Betta-MD</Title>
            <Text c="dimmed" size="lg">
              Your comprehensive aquarium management dashboard
            </Text>
          </div>

          {/* Tank Status Overview */}
          <Card shadow="sm" padding="lg" radius="md" withBorder>
            <Group align="flex-start" mb="md">
              <RingProgress
                size={100}
                thickness={10}
                roundCaps
                sections={[
                  { value: 40, color: 'cyan' },
                  { value: 30, color: 'blue' },
                  { value: 20, color: 'indigo' }
                ]}
                label={
                  <Group justify="center">
                    <IconFish size={20} />
                  </Group>
                }
              />
              <div>
                <Text fw={500} size="lg">Tank Health Overview</Text>
                <Text size="sm" c="dimmed" mt={5}>
                  Your aquarium is in good condition. Next water change recommended in 2 days.
                </Text>
              </div>
            </Group>

            <Paper bg="blue.0" p="md" radius="md">
              <Group justify="space-between">
                <div>
                  <Text size="sm" fw={500}>Quick Actions Needed</Text>
                  <Text size="xs" c="dimmed">Check pH levels and perform water test</Text>
                </div>
                <Button variant="light" size="xs" component={Link} href="/aquarium">
                  Go to Tracker
                </Button>
              </Group>
            </Paper>
          </Card>

          {/* Main Navigation Cards */}
          <SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="lg">
            <DashboardCard
              title="Aquarium Tracker"
              description="Monitor water parameters and get recommendations"
              icon={IconChartBar}
              href="/aquarium"
              color="blue"
            />
            <DashboardCard
              title="Maintenance Log"
              description="Track water changes and maintenance tasks"
              icon={IconDroplet}
              href="/maintenance"
              color="cyan"
            />
            <DashboardCard
              title="Water Tests"
              description="Record and analyze water test results"
              icon={IconFlask}
              href="/tests"
              color="indigo"
            />
          </SimpleGrid>

          {/* Recent Activity or Tips could go here */}
        </Stack>
      </Container>
    </MainLayout>
  );
}
// app/tests/page.tsx
'use client';

import { MainLayout } from '../components/layout/MainLayout';
import { 
  Container, 
  Title, 
  Text, 
  Stack,
  SimpleGrid,
  Card,
  Group,
  ThemeIcon,
  Button,
  Paper,
  RingProgress
} from '@mantine/core';
import { 
  IconFish, 
  IconDroplet, 
  IconThermometer,
  IconFlask,
  IconChartBar 
} from '@tabler/icons-react';
import Link from 'next/link';

const DashboardCard = ({ 
  title, 
  description, 
  icon: Icon, 
  href,
  color = 'blue' 
}: {
  title: string;
  description: string;
  icon: typeof IconFish;
  href: string;
  color?: string;
}) => (
  <Card 
    component={Link}
    href={href}
    shadow="sm" 
    padding="lg" 
    radius="md" 
    withBorder
    style={{ 
      textDecoration: 'none',
      transition: 'transform 0.2s',
      '&:hover': { transform: 'translateY(-5px)' }
    }}
  >
    <Group>
      <ThemeIcon 
        size="xl" 
        radius="md" 
        variant="light" 
        color={color}
      >
        <Icon size={28} />
      </ThemeIcon>
      <div>
        <Text fw={500} size="lg" mb={5}>{title}</Text>
        <Text c="dimmed" size="sm">{description}</Text>
      </div>
    </Group>
  </Card>
);

export default function HomePage() {
  return (
    <MainLayout>
      <Container size="lg" py="xl">
        <Stack gap="xl">
          {/* Welcome Section */}
          <div>
            <Title order={1} size="h2" mb="xs">Welcome to Betta-MD</Title>
            <Text c="dimmed" size="lg">
              Your comprehensive aquarium management dashboard
            </Text>
          </div>

          {/* Tank Status Overview */}
          <Card shadow="sm" padding="lg" radius="md" withBorder>
            <Group align="flex-start" mb="md">
              <RingProgress
                size={100}
                thickness={10}
                roundCaps
                sections={[
                  { value: 40, color: 'cyan' },
                  { value: 30, color: 'blue' },
                  { value: 20, color: 'indigo' }
                ]}
                label={
                  <Group justify="center">
                    <IconFish size={20} />
                  </Group>
                }
              />
              <div>
                <Text fw={500} size="lg">Tank Health Overview</Text>
                <Text size="sm" c="dimmed" mt={5}>
                  Your aquarium is in good condition. Next water change recommended in 2 days.
                </Text>
              </div>
            </Group>

            <Paper bg="blue.0" p="md" radius="md">
              <Group justify="space-between">
                <div>
                  <Text size="sm" fw={500}>Quick Actions Needed</Text>
                  <Text size="xs" c="dimmed">Check pH levels and perform water test</Text>
                </div>
                <Button variant="light" size="xs" component={Link} href="/aquarium">
                  Go to Tracker
                </Button>
              </Group>
            </Paper>
          </Card>

          {/* Main Navigation Cards */}
          <SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="lg">
            <DashboardCard
              title="Aquarium Tracker"
              description="Monitor water parameters and get recommendations"
              icon={IconChartBar}
              href="/aquarium"
              color="blue"
            />
            <DashboardCard
              title="Maintenance Log"
              description="Track water changes and maintenance tasks"
              icon={IconDroplet}
              href="/maintenance"
              color="cyan"
            />
            <DashboardCard
              title="Water Tests"
              description="Record and analyze water test results"
              icon={IconFlask}
              href="/tests"
              color="indigo"
            />
          </SimpleGrid>

          {/* Recent Activity or Tips could go here */}
        </Stack>
      </Container>
    </MainLayout>
  );
}
// app/types/cloudflare.d.ts
import { NextRequest } from 'next/server';

export interface KVNamespace {
  get(key: string): Promise<string | null>;
  put(key: string, value: string): Promise<void>;
  delete(key: string): Promise<void>;
}

export interface D1Database {
  prepare(sql: string): {
    bind(params: unknown[]): {
      first<T>(): Promise<T | undefined>;
    };
  };
}

export interface CloudflareEnv {
  MY_KV_NAMESPACE: KVNamespace;
  DB: D1Database;
  USER_ID?: number;
}

export function getRequestContext(): {
  env: CloudflareEnv;
  waitUntil(promise: Promise<any>): void;
  passThroughOnException(): void;
} {
  const ctx = (globalThis as any).getRequestContext();
  const userId = ctx.env.USER_ID;

  return {
    env: {
      ...ctx.env,
      userId,
    },
    waitUntil: ctx.waitUntil,
    passThroughOnException: ctx.passThroughOnException,
  };
}
// app/types/metadata.ts
// app/types/metadata.ts

export const siteConfig = {
    name: 'Betta-MD',
    description: 'Aquarium Management System',
    url: 'https://your-domain.com',
    ogImage: 'https://your-domain.com/og.jpg',
    links: {
      twitter: 'https://twitter.com/yourusername',
      github: 'https://github.com/yourusername/betta-md',
    },
  } as const;
  
  export type SiteConfig = typeof siteConfig;
// app/utils/auth.ts
import { NextApiRequest, NextApiResponse, NextApiHandler } from 'next';
import jwt from 'jsonwebtoken';
import { getRequestContext, CloudflareEnv } from '../types/cloudflare.d';

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

interface ExtendedNextApiRequest extends NextApiRequest {
  userId?: number;
}

export const authMiddleware = (handler: NextApiHandler) => async (
  req: ExtendedNextApiRequest,
  res: NextApiResponse
) => {
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };
    const ctx = getRequestContext();
    req.userId = ctx.env.USER_ID = decoded.userId;
    return handler(req, res);
  } catch (error) {
    return res.status(401).json({ error: 'Invalid token' });
  }
};
// app/utils/db.ts
import { D1Database, getRequestContext } from '../types/cloudflare.d'

let db: D1Database;

export async function getDB(): Promise<D1Database> {
  if (!db) {
    const ctx = getRequestContext();
    db = ctx.env.DB;
  }
  return db;
}

export async function query(
  sql: string,
  params?: unknown[]
): Promise<unknown[]> {
  const db = await getDB();
  const result = await db.prepare(sql).bind(params || []).first<unknown[]>();
  return result || [];
}
// env.d.ts
// Generated by Wrangler
// by running `wrangler types --env-interface CloudflareEnv env.d.ts`

interface CloudflareEnv {
}

// next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

// next.config.mjs
import { setupDevPlatform } from '@cloudflare/next-on-pages/next-dev';
import { resolve } from 'path';

if (process.env.NODE_ENV === 'development') {
  await setupDevPlatform();
}

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  webpack: (config) => {
    config.resolve.alias = {
      ...config.resolve.alias,
      '@mantine/core': resolve(process.cwd(), 'node_modules/@mantine/core'),
      '@mantine/hooks': resolve(process.cwd(), 'node_modules/@mantine/hooks'),
      '@app': resolve(process.cwd(), 'app'),
    };

    return config;
  },
  experimental: {
    optimizePackageImports: ['@mantine/core', '@mantine/hooks']
  },
};

export default nextConfig;

// postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    'tailwindcss': {},
    'autoprefixer': {},
    'postcss-preset-mantine': {},
    'postcss-simple-vars': {
      variables: {
        'mantine-breakpoint-xs': '36em',
        'mantine-breakpoint-sm': '48em',
        'mantine-breakpoint-md': '62em',
        'mantine-breakpoint-lg': '75em',
        'mantine-breakpoint-xl': '88em',
      },
    },
  },
};

export default config;
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}


// tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  corePlugins: {
    preflight: false,
  },
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        'mantine-primary': 'var(--mantine-primary-color)',
        'mantine-text': 'var(--mantine-color-text)',
        'mantine-body': 'var(--mantine-color-body)',
        aqua: {
          50: 'var(--mantine-color-blue-0)',
          100: 'var(--mantine-color-blue-1)',
          200: 'var(--mantine-color-blue-2)',
          300: 'var(--mantine-color-blue-3)',
          400: 'var(--mantine-color-blue-4)',
          500: 'var(--mantine-color-blue-5)',
          600: 'var(--mantine-color-blue-6)',
          700: 'var(--mantine-color-blue-7)',
          800: 'var(--mantine-color-blue-8)',
          900: 'var(--mantine-color-blue-9)',
        },
      },
      spacing: {
        'mantine-xs': 'var(--mantine-spacing-xs)',
        'mantine-sm': 'var(--mantine-spacing-sm)',
        'mantine-md': 'var(--mantine-spacing-md)',
        'mantine-lg': 'var(--mantine-spacing-lg)',
        'mantine-xl': 'var(--mantine-spacing-xl)',
      },
      borderRadius: {
        'mantine-sm': 'var(--mantine-radius-sm)',
        'mantine-md': 'var(--mantine-radius-md)',
        'mantine-lg': 'var(--mantine-radius-lg)',
      },
    },
  },
  plugins: [],
  important: false,
};

export default config;
// tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    },
    "types": [
      "@cloudflare/workers-types/2023-07-01"
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
// wrangler.toml
#:schema node_modules/wrangler/config-schema.json
name = "betta-md"
compatibility_date = "2024-11-12"
compatibility_flags = ["nodejs_compat"]
pages_build_output_dir = ".vercel/output/static"

# Automatically place your workloads in an optimal location to minimize latency.
# If you are running back-end logic in a Pages Function, running it closer to your back-end infrastructure
# rather than the end user may result in better performance.
# Docs: https://developers.cloudflare.com/pages/functions/smart-placement/#smart-placement
# [placement]
# mode = "smart"

# Variable bindings. These are arbitrary, plaintext strings (similar to environment variables)
# Docs:
# - https://developers.cloudflare.com/pages/functions/bindings/#environment-variables
# Note: Use secrets to store sensitive data.
# - https://developers.cloudflare.com/pages/functions/bindings/#secrets
# [vars]
# MY_VARIABLE = "production_value"

# Bind the Workers AI model catalog. Run machine learning models, powered by serverless GPUs, on Cloudflare’s global network
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#workers-ai
# [ai]
# binding = "AI"

# Bind a D1 database. D1 is Cloudflare’s native serverless SQL database.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#d1-databases
# [[d1_databases]]
# binding = "MY_DB"
# database_name = "my-database"
# database_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"
# script_name = 'my-durable-object'

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#kv-namespaces
# KV Example:
# [[kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Bind a Queue producer. Use this binding to schedule an arbitrary task that may be processed later by a Queue consumer.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#queue-producers
# [[queues.producers]]
# binding = "MY_QUEUE"
# queue = "my-queue"

# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#r2-buckets
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#service-bindings
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"

# To use different bindings for preview and production environments, follow the examples below.
# When using environment-specific overrides for bindings, ALL bindings must be specified on a per-environment basis.
# Docs: https://developers.cloudflare.com/pages/functions/wrangler-configuration#environment-specific-overrides

######## PREVIEW environment config ########

# [env.preview.vars]
# API_KEY = "xyz789"

# [[env.preview.kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "<PREVIEW_NAMESPACE_ID>"

######## PRODUCTION environment config ########

# [env.production.vars]
# API_KEY = "abc123"

# [[env.production.kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "<PRODUCTION_NAMESPACE_ID>"

[[d1_databases]]
binding = "DB"
database_name = "beta-md-app"
database_id = "6d0f6add-12f2-4785-917b-ebf0b2c94339"
